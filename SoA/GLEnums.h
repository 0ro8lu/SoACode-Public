#pragma once

// TODO: These All Must Uppercased (ex. BufferTarget)
namespace GL {
    enum class BufferTarget {
        ARRAY_BUFFER = GL_ARRAY_BUFFER,
        ATOMIC_COUNTER_BUFFER = GL_ATOMIC_COUNTER_BUFFER,
        COPY_READ_BUFFER = GL_COPY_READ_BUFFER,
        COPY_WRITE_BUFFER = GL_COPY_WRITE_BUFFER,
        DISPATCH_INDIRECT_BUFFER = GL_DISPATCH_INDIRECT_BUFFER,
        DRAW_INDIRECT_BUFFER = GL_DRAW_INDIRECT_BUFFER,
        ELEMENT_ARRAY_BUFFER = GL_ELEMENT_ARRAY_BUFFER,
        PIXEL_PACK_BUFFER = GL_PIXEL_PACK_BUFFER,
        PIXEL_UNPACK_BUFFER = GL_PIXEL_UNPACK_BUFFER,
        QUERY_BUFFER = GL_QUERY_BUFFER,
        SHADER_STORAGE_BUFFER = GL_SHADER_STORAGE_BUFFER,
        TEXTURE_BUFFER = GL_TEXTURE_BUFFER,
        TRANSFORM_FEEDBACK_BUFFER = GL_TRANSFORM_FEEDBACK_BUFFER,
        UNIFORM_BUFFER = GL_UNIFORM_BUFFER
    };
    enum class BufferUsageHint {
        DYNAMIC_COPY = GL_DYNAMIC_COPY,
        DYNAMIC_DRAW = GL_DYNAMIC_DRAW,
        DYNAMIC_READ = GL_DYNAMIC_READ,
        STATIC_COPY = GL_STATIC_COPY,
        STATIC_DRAW = GL_STATIC_DRAW,
        STATIC_READ = GL_STATIC_READ,
        STREAM_COPY = GL_STREAM_COPY,
        STREAM_DRAW = GL_STREAM_DRAW,
        STREAM_READ = GL_STREAM_READ
    };
    enum class VertexAttribPointerType {
        BYTE = GL_BYTE,
        DOUBLE = GL_DOUBLE,
        FIXED = GL_FIXED,
        FLOAT = GL_FLOAT,
        HALF_FLOAT = GL_HALF_FLOAT,
        INT = GL_INT,
        INT_2_10_10_10_REV = GL_INT_2_10_10_10_REV,
        SHORT = GL_SHORT,
        UNSIGNED_BYTE = GL_UNSIGNED_BYTE,
        UNSIGNED_INT = GL_UNSIGNED_INT,
        UNSIGNED_INT_2_10_10_10_REV = GL_UNSIGNED_INT_2_10_10_10_REV,
        UNSIGNED_SHORT = GL_UNSIGNED_SHORT
    };
    enum class TextureTarget {
        PROXY_TEXTURE_1D = GL_PROXY_TEXTURE_1D,
        PROXY_TEXTURE_1D_ARRAY = GL_PROXY_TEXTURE_1D_ARRAY,
        PROXY_TEXTURE_2D = GL_PROXY_TEXTURE_2D,
        PROXY_TEXTURE_2D_ARRAY = GL_PROXY_TEXTURE_2D_ARRAY,
        PROXY_TEXTURE_2D_MULTISAMPLE = GL_PROXY_TEXTURE_2D_MULTISAMPLE,
        PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY,
        PROXY_TEXTURE_3D = GL_PROXY_TEXTURE_3D,
        PROXY_TEXTURE_CUBE_MAP = GL_PROXY_TEXTURE_CUBE_MAP,
        PROXY_TEXTURE_CUBE_MAP_ARRAY = GL_PROXY_TEXTURE_CUBE_MAP_ARRAY,
        PROXY_TEXTURE_RECTANGLE = GL_PROXY_TEXTURE_RECTANGLE,
        TEXTURE_1D = GL_TEXTURE_1D,
        TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
        TEXTURE_2D = GL_TEXTURE_2D,
        TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
        TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE,
        TEXTURE_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY,
        TEXTURE_3D = GL_TEXTURE_3D,
        TEXTURE_BASE_LEVEL = GL_TEXTURE_BASE_LEVEL,
        TEXTURE_BINDING_CUBE_MAP = GL_TEXTURE_BINDING_CUBE_MAP,
        TEXTURE_BUFFER = GL_TEXTURE_BUFFER,
        TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP,
        TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
        TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
        TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
        TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
        TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
        TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
        TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
        TEXTURE_MAX_LEVEL = GL_TEXTURE_MAX_LEVEL,
        TEXTURE_MAX_LOD = GL_TEXTURE_MAX_LOD,
        TEXTURE_MIN_LOD = GL_TEXTURE_MIN_LOD,
        TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE
    };
    enum class TextureParameterName {
        ClampToBorder = GL_CLAMP_TO_BORDER,
        ClampToEdge = GL_CLAMP_TO_EDGE,
        DepthTextureMode = GL_DEPTH_TEXTURE_MODE,
        GenerateMipmap = GL_GENERATE_MIPMAP,
        TextureBaseLevel = GL_TEXTURE_BASE_LEVEL,
        TextureBorderColor = GL_TEXTURE_BORDER_COLOR,
        TextureCompareFunc = GL_TEXTURE_COMPARE_FUNC,
        TextureCompareMode = GL_TEXTURE_COMPARE_MODE,
        TextureDepth = GL_TEXTURE_DEPTH,
        TextureLodBias = GL_TEXTURE_LOD_BIAS,
        TextureMagFilter = GL_TEXTURE_MAG_FILTER,
        TextureMaxLevel = GL_TEXTURE_MAX_LEVEL,
        TextureMaxLod = GL_TEXTURE_MAX_LOD,
        TextureMinFilter = GL_TEXTURE_MIN_FILTER,
        TextureMinLod = GL_TEXTURE_MIN_LOD,
        TexturePriority = GL_TEXTURE_PRIORITY,
        TextureSwizzleA = GL_TEXTURE_SWIZZLE_A,
        TextureSwizzleB = GL_TEXTURE_SWIZZLE_B,
        TextureSwizzleG = GL_TEXTURE_SWIZZLE_G,
        TextureSwizzleR = GL_TEXTURE_SWIZZLE_R,
        TextureSwizzleRgba = GL_TEXTURE_SWIZZLE_RGBA,
        TextureWrapR = GL_TEXTURE_WRAP_R,
        TextureWrapS = GL_TEXTURE_WRAP_S,
        TextureWrapT = GL_TEXTURE_WRAP_T
    };
    enum class ShaderType {
        ComputeShader = GL_COMPUTE_SHADER,
        FragmentShader = GL_FRAGMENT_SHADER,
        GeometryShader = GL_GEOMETRY_SHADER,
        TessControlShader = GL_TESS_CONTROL_SHADER,
        TessEvaluationShader = GL_TESS_EVALUATION_SHADER,
        VertexShader = GL_VERTEX_SHADER
    };
    enum class ShaderParameter {
        CompileStatus = GL_COMPILE_STATUS,
        DeleteStatus = GL_DELETE_STATUS,
        InfoLogLength = GL_INFO_LOG_LENGTH,
        ShaderSourceLength = GL_SHADER_SOURCE_LENGTH,
        ShaderType = GL_SHADER_TYPE
    };
    enum class GetProgramParameterName {
        ActiveAtomicCounterBuffers = GL_ACTIVE_ATOMIC_COUNTER_BUFFERS,
        ActiveAttributeMaxLength = GL_ACTIVE_ATTRIBUTE_MAX_LENGTH,
        ActiveAttributes = GL_ACTIVE_ATTRIBUTES,
        ActiveUniformBlockMaxNameLength = GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH,
        ActiveUniformBlocks = GL_ACTIVE_UNIFORM_BLOCKS,
        ActiveUniformMaxLength = GL_ACTIVE_UNIFORM_MAX_LENGTH,
        ActiveUniforms = GL_ACTIVE_UNIFORMS,
        AttachedShaders = GL_ATTACHED_SHADERS,
        DeleteStatus = GL_DELETE_STATUS,
        GeometryInputType = GL_GEOMETRY_INPUT_TYPE,
        GeometryOutputType = GL_GEOMETRY_OUTPUT_TYPE,
        GeometryShaderInvocations = GL_GEOMETRY_SHADER_INVOCATIONS,
        GeometryVerticesOut = GL_GEOMETRY_VERTICES_OUT,
        InfoLogLength = GL_INFO_LOG_LENGTH,
        LinkStatus = GL_LINK_STATUS,
        MaxComputeWorkGroupSize = GL_MAX_COMPUTE_WORK_GROUP_SIZE,
        ProgramBinaryRetrievableHint = GL_PROGRAM_BINARY_RETRIEVABLE_HINT,
        ProgramSeparable = GL_PROGRAM_SEPARABLE,
        TessControlOutputVertices = GL_TESS_CONTROL_OUTPUT_VERTICES,
        TessGenMode = GL_TESS_GEN_MODE,
        TessGenPointMode = GL_TESS_GEN_POINT_MODE,
        TessGenSpacing = GL_TESS_GEN_SPACING,
        TessGenVertexOrder = GL_TESS_GEN_VERTEX_ORDER,
        TransformFeedbackBufferMode = GL_TRANSFORM_FEEDBACK_BUFFER_MODE,
        TransformFeedbackVaryingMaxLength = GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH,
        TransformFeedbackVaryings = GL_TRANSFORM_FEEDBACK_VARYINGS,
        ValidateStatus = GL_VALIDATE_STATUS
    };
    enum class FramebufferTarget {
        DrawFramebuffer = GL_DRAW_FRAMEBUFFER,
        Framebuffer = GL_FRAMEBUFFER,
        ReadFramebuffer = GL_READ_FRAMEBUFFER
    };
    enum class FramebufferAttachment {
        Aux0 = GL_AUX0,
        Aux1 = GL_AUX1,
        Aux2 = GL_AUX2,
        Aux3 = GL_AUX3,
        BackLeft = GL_BACK_LEFT,
        BackRight = GL_BACK_RIGHT,
        Color = GL_COLOR,
        ColorAttachment0 = GL_COLOR_ATTACHMENT0,
        ColorAttachment1 = GL_COLOR_ATTACHMENT1,
        ColorAttachment10 = GL_COLOR_ATTACHMENT10,
        ColorAttachment11 = GL_COLOR_ATTACHMENT11,
        ColorAttachment12 = GL_COLOR_ATTACHMENT12,
        ColorAttachment13 = GL_COLOR_ATTACHMENT13,
        ColorAttachment14 = GL_COLOR_ATTACHMENT14,
        ColorAttachment15 = GL_COLOR_ATTACHMENT15,
        ColorAttachment2 = GL_COLOR_ATTACHMENT2,
        ColorAttachment3 = GL_COLOR_ATTACHMENT3,
        ColorAttachment4 = GL_COLOR_ATTACHMENT4,
        ColorAttachment5 = GL_COLOR_ATTACHMENT5,
        ColorAttachment6 = GL_COLOR_ATTACHMENT6,
        ColorAttachment7 = GL_COLOR_ATTACHMENT7,
        ColorAttachment8 = GL_COLOR_ATTACHMENT8,
        ColorAttachment9 = GL_COLOR_ATTACHMENT9,
        Depth = GL_DEPTH,
        DepthAttachment = GL_DEPTH_ATTACHMENT,
        DepthStencilAttachment = GL_DEPTH_STENCIL_ATTACHMENT,
        FrontLeft = GL_FRONT_LEFT,
        FrontRight = GL_FRONT_RIGHT,
        Stencil = GL_STENCIL,
        StencilAttachment = GL_STENCIL_ATTACHMENT
    };
    enum class RenderbufferTarget {
        Renderbuffer = GL_RENDERBUFFER,
    };
    enum class RenderbufferStorage {
        Depth24Stencil8 = GL_DEPTH24_STENCIL8,
        Depth32fStencil8 = GL_DEPTH32F_STENCIL8,
        DepthComponent = GL_DEPTH_COMPONENT,
        DepthComponent16 = GL_DEPTH_COMPONENT16,
        DepthComponent24 = GL_DEPTH_COMPONENT24,
        DepthComponent32 = GL_DEPTH_COMPONENT32,
        DepthComponent32f = GL_DEPTH_COMPONENT32F,
        DepthStencil = GL_DEPTH_STENCIL,
        R11fG11fB10f = GL_R11F_G11F_B10F,
        R16 = GL_R16,
        R16f = GL_R16F,
        R16i = GL_R16I,
        R16ui = GL_R16UI,
        R32f = GL_R32F,
        R32i = GL_R32I,
        R32ui = GL_R32UI,
        R3G3B2 = GL_R3_G3_B2,
        R8 = GL_R8,
        R8i = GL_R8I,
        R8ui = GL_R8UI,
        Rg16 = GL_RG16,
        Rg16f = GL_RG16F,
        Rg16i = GL_RG16I,
        Rg16ui = GL_RG16UI,
        Rg32f = GL_RG32F,
        Rg32i = GL_RG32I,
        Rg32ui = GL_RG32UI,
        Rg8 = GL_RG8,
        Rg8i = GL_RG8I,
        Rg8ui = GL_RG8UI,
        Rgb10 = GL_RGB10,
        Rgb10A2 = GL_RGB10_A2,
        Rgb10A2ui = GL_RGB10_A2UI,
        Rgb12 = GL_RGB12,
        Rgb16 = GL_RGB16,
        Rgb16f = GL_RGB16F,
        Rgb16i = GL_RGB16I,
        Rgb16ui = GL_RGB16UI,
        Rgb32f = GL_RGB32F,
        Rgb32i = GL_RGB32I,
        Rgb32ui = GL_RGB32UI,
        Rgb4 = GL_RGB4,
        Rgb5 = GL_RGB5,
        Rgb8 = GL_RGB8,
        Rgb8i = GL_RGB8I,
        Rgb8ui = GL_RGB8UI,
        Rgb9E5 = GL_RGB9_E5,
        Rgba12 = GL_RGBA12,
        Rgba16 = GL_RGBA16,
        Rgba16f = GL_RGBA16F,
        Rgba16i = GL_RGBA16I,
        Rgba16ui = GL_RGBA16UI,
        Rgba2 = GL_RGBA2,
        Rgba32f = GL_RGBA32F,
        Rgba32i = GL_RGBA32I,
        Rgba32ui = GL_RGBA32UI,
        Rgba4 = GL_RGBA4,
        Rgba8 = GL_RGBA8,
        Rgba8i = GL_RGBA8I,
        Rgba8ui = GL_RGBA8UI,
        Srgb8 = GL_SRGB8,
        Srgb8Alpha8 = GL_SRGB8_ALPHA8,
        StencilIndex1 = GL_STENCIL_INDEX1,
        StencilIndex16 = GL_STENCIL_INDEX16,
        StencilIndex4 = GL_STENCIL_INDEX4,
        StencilIndex8 = GL_STENCIL_INDEX8
    };
    enum class DrawBufferMode {
        Back = GL_BACK,
        BackLeft = GL_BACK_LEFT,
        BackRight = GL_BACK_RIGHT,
        ColorAttachment0 = GL_COLOR_ATTACHMENT0,
        ColorAttachment1 = GL_COLOR_ATTACHMENT1,
        ColorAttachment10 = GL_COLOR_ATTACHMENT10,
        ColorAttachment11 = GL_COLOR_ATTACHMENT11,
        ColorAttachment12 = GL_COLOR_ATTACHMENT12,
        ColorAttachment13 = GL_COLOR_ATTACHMENT13,
        ColorAttachment14 = GL_COLOR_ATTACHMENT14,
        ColorAttachment15 = GL_COLOR_ATTACHMENT15,
        ColorAttachment2 = GL_COLOR_ATTACHMENT2,
        ColorAttachment3 = GL_COLOR_ATTACHMENT3,
        ColorAttachment4 = GL_COLOR_ATTACHMENT4,
        ColorAttachment5 = GL_COLOR_ATTACHMENT5,
        ColorAttachment6 = GL_COLOR_ATTACHMENT6,
        ColorAttachment7 = GL_COLOR_ATTACHMENT7,
        ColorAttachment8 = GL_COLOR_ATTACHMENT8,
        ColorAttachment9 = GL_COLOR_ATTACHMENT9,
        Front = GL_FRONT,
        FrontAndBack = GL_FRONT_AND_BACK,
        FrontLeft = GL_FRONT_LEFT,
        FrontRight = GL_FRONT_RIGHT,
        Left = GL_LEFT,
        None = GL_NONE,
        Right = GL_RIGHT
    };
    enum class FramebufferErrorCode {
        FramebufferComplete = GL_FRAMEBUFFER_COMPLETE,
        FramebufferIncompleteAttachment = GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT,
        FramebufferIncompleteDrawBuffer = GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER,
        FramebufferIncompleteLayerTargets = GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS,
        FramebufferIncompleteMissingAttachment = GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT,
        FramebufferIncompleteMultisample = GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE,
        FramebufferIncompleteReadBuffer = GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER,
        FramebufferUndefined = GL_FRAMEBUFFER_UNDEFINED,
        FramebufferUnsupported = GL_FRAMEBUFFER_UNSUPPORTED
    };
    enum class ErrorCode {
        Invalidenum class = GL_INVALID_enum class,
        InvalidFramebufferOperation = GL_INVALID_FRAMEBUFFER_OPERATION,
        InvalidOperation = GL_INVALID_OPERATION,
        InvalidValue = GL_INVALID_VALUE,
        NoError = GL_NO_ERROR,
        OutOfMemory = GL_OUT_OF_MEMORY
    };
    enum class EnableCap {
        Blend = GL_BLEND,
        ClipDistance0 = GL_CLIP_DISTANCE0,
        ClipDistance1 = GL_CLIP_DISTANCE1,
        ClipDistance2 = GL_CLIP_DISTANCE2,
        ClipDistance3 = GL_CLIP_DISTANCE3,
        ClipDistance4 = GL_CLIP_DISTANCE4,
        ClipDistance5 = GL_CLIP_DISTANCE5,
        ClipPlane0 = GL_CLIP_PLANE0,
        ClipPlane1 = GL_CLIP_PLANE1,
        ClipPlane2 = GL_CLIP_PLANE2,
        ClipPlane3 = GL_CLIP_PLANE3,
        ClipPlane4 = GL_CLIP_PLANE4,
        ClipPlane5 = GL_CLIP_PLANE5,
        ColorLogicOp = GL_COLOR_LOGIC_OP,
        ColorSum = GL_COLOR_SUM,
        CullFace = GL_CULL_FACE,
        DebugOutput = GL_DEBUG_OUTPUT,
        DebugOutputSynchronous = GL_DEBUG_OUTPUT_SYNCHRONOUS,
        DepthClamp = GL_DEPTH_CLAMP,
        DepthTest = GL_DEPTH_TEST,
        Dither = GL_DITHER,
        FogCoordArray = GL_FOG_COORD_ARRAY,
        FramebufferSrgb = GL_FRAMEBUFFER_SRGB,
        LineSmooth = GL_LINE_SMOOTH,
        Multisample = GL_MULTISAMPLE,
        PointSprite = GL_POINT_SPRITE,
        PolygonOffsetFill = GL_POLYGON_OFFSET_FILL,
        PolygonOffsetLine = GL_POLYGON_OFFSET_LINE,
        PolygonOffsetPoint = GL_POLYGON_OFFSET_POINT,
        PolygonSmooth = GL_POLYGON_SMOOTH,
        PrimitiveRestart = GL_PRIMITIVE_RESTART,
        PrimitiveRestartFixedIndex = GL_PRIMITIVE_RESTART_FIXED_INDEX,
        ProgramPointSize = GL_PROGRAM_POINT_SIZE,
        RasterizerDiscard = GL_RASTERIZER_DISCARD,
        RescaleNormal = GL_RESCALE_NORMAL,
        SampleAlphaToCoverage = GL_SAMPLE_ALPHA_TO_COVERAGE,
        SampleAlphaToOne = GL_SAMPLE_ALPHA_TO_ONE,
        SampleCoverage = GL_SAMPLE_COVERAGE,
        SampleMask = GL_SAMPLE_MASK,
        SampleShading = GL_SAMPLE_SHADING,
        ScissorTest = GL_SCISSOR_TEST,
        SecondaryColorArray = GL_SECONDARY_COLOR_ARRAY,
        StencilTest = GL_STENCIL_TEST,
        Texture1D = GL_TEXTURE_1D,
        Texture2D = GL_TEXTURE_2D,
        TextureCubeMap = GL_TEXTURE_CUBE_MAP,
        TextureCubeMapSeamless = GL_TEXTURE_CUBE_MAP_SEAMLESS,
        TextureRectangle = GL_TEXTURE_RECTANGLE,
        VertexProgramPointSize = GL_VERTEX_PROGRAM_POINT_SIZE,
        VertexProgramTwoSide = GL_VERTEX_PROGRAM_TWO_SIDE
    };
    enum class TextureMinFilter {
        LINEAR = GL_LINEAR,
        LINEAR_MIPMAP_LINEAR = GL_LINEAR_MIPMAP_LINEAR,
        LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST,
        NEAREST = GL_NEAREST,
        NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,
        NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST
    };
    enum class TextureMagFilter {
        LINEAR = GL_LINEAR,
        NEAREST = GL_NEAREST
    };
    enum class TextureWrapMode {
        CLAMP_BORDER = GL_CLAMP_TO_BORDER,
        CLAMP_EDGE = GL_CLAMP_TO_EDGE,
        REPEAT_MIRRORED = GL_MIRRORED_REPEAT,
        REPEAT = GL_REPEAT
    };
    enum class DepthFunction {
        Always = GL_ALWAYS,
        Equal = GL_EQUAL,
        Gequal = GL_GEQUAL,
        Greater = GL_GREATER,
        Lequal = GL_LEQUAL,
        Less = GL_LESS,
        Never = GL_NEVER,
        Notequal = GL_NOTEQUAL
    };
    enum class BlendEquationMode {
        FuncAdd = GL_FUNC_ADD,
        FuncReverseSubtract = GL_FUNC_REVERSE_SUBTRACT,
        FuncSubtract = GL_FUNC_SUBTRACT,
        Max = GL_MAX,
        Min = GL_MIN
    };
    enum class BlendingFactorSrc {
        ConstantAlpha = GL_CONSTANT_ALPHA,
        ConstantColor = GL_CONSTANT_COLOR,
        DstAlpha = GL_DST_ALPHA,
        DstColor = GL_DST_COLOR,
        One = GL_ONE,
        OneMinusConstantAlpha = GL_ONE_MINUS_CONSTANT_ALPHA,
        OneMinusConstantColor = GL_ONE_MINUS_CONSTANT_COLOR,
        OneMinusDstAlpha = GL_ONE_MINUS_DST_ALPHA,
        OneMinusDstColor = GL_ONE_MINUS_DST_COLOR,
        OneMinusSrc1Alpha = GL_ONE_MINUS_SRC1_ALPHA,
        OneMinusSrc1Color = GL_ONE_MINUS_SRC1_COLOR,
        OneMinusSrcAlpha = GL_ONE_MINUS_SRC_ALPHA,
        OneMinusSrcColor = GL_ONE_MINUS_SRC_COLOR,
        Src1Alpha = GL_SRC1_ALPHA,
        Src1Color = GL_SRC1_COLOR,
        SrcAlpha = GL_SRC_ALPHA,
        SrcAlphaSaturate = GL_SRC_ALPHA_SATURATE,
        SrcColor = GL_SRC_COLOR,
        Zero = GL_ZERO
    };
    enum class BlendingFactorDest {
        ConstantAlpha = GL_CONSTANT_ALPHA,
        ConstantColor = GL_CONSTANT_COLOR,
        DstAlpha = GL_DST_ALPHA,
        DstColor = GL_DST_COLOR,
        One = GL_ONE,
        OneMinusConstantAlpha = GL_ONE_MINUS_CONSTANT_ALPHA,
        OneMinusConstantColor = GL_ONE_MINUS_CONSTANT_COLOR,
        OneMinusDstAlpha = GL_ONE_MINUS_DST_ALPHA,
        OneMinusDstColor = GL_ONE_MINUS_DST_COLOR,
        OneMinusSrc1Alpha = GL_ONE_MINUS_SRC1_ALPHA,
        OneMinusSrc1Color = GL_ONE_MINUS_SRC1_COLOR,
        OneMinusSrcAlpha = GL_ONE_MINUS_SRC_ALPHA,
        OneMinusSrcColor = GL_ONE_MINUS_SRC_COLOR,
        Src1Alpha = GL_SRC1_ALPHA,
        Src1Color = GL_SRC1_COLOR,
        SrcAlpha = GL_SRC_ALPHA,
        SrcAlphaSaturate = GL_SRC_ALPHA_SATURATE,
        SrcColor = GL_SRC_COLOR,
        Zero = GL_ZERO
    };
    enum class PrimitiveType {
        LineLoop = GL_LINE_LOOP,
        Lines = GL_LINES,
        LinesAdjacency = GL_LINES_ADJACENCY,
        LineStrip = GL_LINE_STRIP,
        LineStripAdjacency = GL_LINE_STRIP_ADJACENCY,
        Patches = GL_PATCHES,
        Points = GL_POINTS,
        Quads = GL_QUADS,
        TriangleFan = GL_TRIANGLE_FAN,
        Triangles = GL_TRIANGLES,
        TrianglesAdjacency = GL_TRIANGLES_ADJACENCY,
        TriangleStrip = GL_TRIANGLE_STRIP,
        TriangleStripAdjacency = GL_TRIANGLE_STRIP_ADJACENCY
    };
}
